<apex:page controller="SurveyManagerController" sidebar="false" action="{!init}" tabstyle="SurveyManager__tab" id="page">
    <apex:sectionHeader title="Home" subtitle="Surveys" />
    <apex:pageMessages id="errorMessage" ></apex:pageMessages>
    <apex:includeScript value="{!$Resource.jquery}" />
    <apex:includeScript value="{!$Resource.jquerySimpleModal}" />
    <c:blockOverlay label="Loading..." callback="loadMoreActions();"/>
    <iframe style="display:none" src="" class="CSVIframe"/>
<style type="text/css">
    td.noSidebarCell{padding:5px 10px 20px 10px;}
    .errorMessage{
        color:red;
    }
    span.survey-name{font-weight:bold;}
    td[title="Action"] img{width:24px;}
    #simplemodal-overlay {background-color:#000;}
    #simplemodal-container {background-color:white; border:3px solid #444; padding:12px;}
    .custPopup{
        background-color: white;
        border-width: 2px;
        border-style: solid;
        z-index: 9999;
        left: 50%;
        padding:10px;
        position: absolute;
        /* These are the properties to set the actual popup size*/
        width: 500px;
        margin-left: -250px;
        top:100px;
    }
    .popupBackground{
        background-color:black;
        opacity: 0.20;
        filter: alpha(opacity = 20);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 9998;
    }
    .popupList{
     font-weight:bold;
     margin-left: 20px;
    }
    .SelectAllGroups{
     font-weight:bold;
     margin-left: 24px;
    }
    #confirmationClone{
    height:100px;width:250px;display:none;
    }
</style>
<!-- Following two scripts are needed to run SOQL from javascript -->
    <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}';
    </script>
    <script src="/soap/ajax/25.0/connection.js" type="text/javascript"></script>

    <script type="text/javascript">

        // check if the survey has an xform and notify the user that it will be lost if the survey is edited
        function editSurvey(xForm_Status, surveyId){
            if(xForm_Status=='CUSTOM'){
                if(!confirm('This survey has a custom XForm. Customizations will be lost if the survey is edited.' +
                            '\nDo you want edit the survey anyway?')){
                    return;
                }
            }
            window.location = '{!$Page.surveySetting}?id=' + surveyId;
        }

        // Helper method to add options to a select list
        function op(val, str, condition){
            return condition == null || condition
                ? '<option value="' + val + '">' + str + '</option>'
                : null ;
        }

        function loadMoreActions(){
            // Clean select lists
            $('select.moreactions').empty();
        
            // Load actions
            $('select.moreactions').each(function(i,elem){
                var surveyId = $(elem).attr('id').replace('moreactions','');
                var status = $('.' + surveyId).html();
                var isPPI = $('.' + surveyId).hasClass('isPPI');
                var ppiEditable = {!isPPIEnabled};
                var surveyName = $('#name-'+surveyId).html();
                var responses = parseInt($('.responses' + surveyId).text());
                $(elem)
                    .append( op('', 'More Actions...') )
                    .append( op('Preview', 'Preview'))
                    .append( op('Clone', 'Clone', !isPPI || ppiEditable) )
                    .append( op('editXForm', 'Edit XForm', (!isPPI || ppiEditable) && status == "Draft") )
                    .append( op('viewXForm', 'View XForm', status != "Draft") )
                    .append( op('-1', '----------', responses))
                    .append( op('Export', 'Export to CSV', responses) )
                    .append( op('-1', '----------'))
                    .append( op('Delete', 'Delete') );
            });
        }

        $(document).ready(function(){

            $('.statusFilter').change(function(){
                var filter = $(this).val();
                blockPage();
                doFilterStatus(filter);
            });
        });
        var idToClone = '';
        var MSG_CONFIRM_CLOSE = 'You are about to close \'{surveyname}\' survey.'+
                                '\n\nIMPORTANT: After the survey is closed, people will '+
                                'no longer be able to respond to this survey!';

        function execMoreAction(surveyId, SelectId){
            $('select.moreactions').attr('disabled','disabled');
            var action = $('#'+surveyId).find(":nth-child(1)").val();
            if (action != null && action != ''){
                if (action == 'Close'){
                    var surveyName = $('#name-' + surveyId).text();
                    if (confirm( MSG_CONFIRM_CLOSE.replace('{surveyname}', surveyName) )) {
                       doMoreAction( action, surveyId );
                    } else {
                        $('select.moreactions').removeAttr('disabled').val('');
                    }
                }else if (action == 'editXForm') {
                    doMoreAction(action, surveyId);
                }else if (action == 'viewXForm') {
                        doMoreAction(action, surveyId);
                }else if (action == 'Preview') {
                    doMoreAction(action, surveyId);
                }else if (action =='Clone'){
                    idToClone = surveyId;
                    // check if the survey has group assignations
                    var assignations = sforce.connection.query(
                        "select Id " +
                        "from {!$ObjectType.ContactGroupSurveyAssignment__c.Name} " +
                        "where {!$ObjectType.ContactGroupSurveyAssignment__c.Fields['Survey__c'].Name} = '" + surveyId + "'");
                    if(assignations.size>0){
                        $("#confirmationClone").modal();
                    }
                    else{
                        doClone();
                    }
                    $('select.moreactions').removeAttr('disabled').val('');

                }else if (action == 'Export'){
                    var url = '/apex/downloadCsv?surveyid='+ surveyId;
                     $('.CSVIframe').attr('src',url);
                    $('select.moreactions').removeAttr('disabled').val('');
                }else if (action == 'Delete') {
                    // Workaround to work with safari under windows
                    setTimeout(function() {
                         var confirm = confirmDelete();
                         if(confirm) {
                            doMoreAction( action, surveyId );
                         } else {
                            $('select.moreactions').removeAttr('disabled').val('');
                         }
                    },10);
                }
                else if(action == '-1'){
                    $('select.moreactions').removeAttr('disabled').val('');
                }
            }
        }

        function doMoreAction(action, surveyId){

            if (action != 'editXForm'){
                blockPage();
            }
            doMoreActionController(action, surveyId);
        }

        function confirmDelete(){
            return confirm('You are about to delete the survey' +
                     '.\nAre you sure?');

        }
        function closeSurvey(surveyId){
            var surveyName = $('#name-' + surveyId).text();
            if (confirm( MSG_CONFIRM_CLOSE.replace('{surveyname}', surveyName) )) {
                doMoreAction( 'Close', surveyId );
            }
        }

        //sends the id of the selected groups to the controller and process them
        function sendSelectedContactGroupsAndPublish(){
            //contains all the Ids of the groups to be published
            var myContactsGroupsIds = '';
            var ChecboxSelectAll = document.getElementById("SelectAllGroups");

            if($("#SelectAllGroups").is(':checked')){
                //sets all groups
                $('.checkContactGroup').each(function(){
                    myContactsGroupsIds += (myContactsGroupsIds == '' ? '' : ',') + $(this).attr('id');
                });
            }else {
                //sets the checked groups
                $('.checkContactGroup:checked').each(function(){
                    myContactsGroupsIds += (myContactsGroupsIds == '' ? '' : ',') + $(this).attr('id');
                });
            }

            if (myContactsGroupsIds =='' && ChecboxSelectAll != null ){
                alert('At least one group must be selected to publish this survey');
            }else{
                //send data to the controller
                blockPage();
                doPublish(myContactsGroupsIds);
            }
        }
        //this is the functions that actualy clone the survey
        function doClone(){
            var cloneAllAssignmentsBoolean = $("#cloneAllAssignments").is(':checked');
            $.modal.close();
            blockPage();
            doMoreActionController('Clone', idToClone, cloneAllAssignmentsBoolean);
        }
        function changeAllCheckboxes(){
            var checked = $("#SelectAllGroups").is(':checked');
            $('.checkContactGroup').attr('checked', checked);
        }

        function changeCheckboxes(){
            $('.SelectAllGroups').attr('checked', false);
        }

    </script>
    <div id="confirmationClone">
            <p>Clone this survey?</p>
            <form>
                <input type="checkbox" id="cloneAllAssignments" class="cloneAllAssignments" checked="false">
                    Clone Group Assignments
                </input>
                <br />
                <br />
                <div style="text-align: right">
                    <a href="#" onClick="$.modal.close();">Cancel</a>&nbsp;
                    <button class="btn" type="button" onClick="doClone()">Clone Survey</button>
                </div>
            </form>
    </div>
    <apex:form >
        <apex:outputPanel id="confirmationPopUp">
            <script>
                $(document).ready(function(){
                    $('#SelectAllGroups').change(function(){changeAllCheckboxes();});
                    $('.checkContactGroup').change(function(){
                           $('#SelectAllGroups')[0].checked = this.checked && $('.checkContactGroup').size() == $('.checkContactGroup:checked').size();
                    });
                });
            </script>
            <apex:outputPanel styleClass="popupBackground" layout="block" rendered="{!displayGroupPopUp}"/>
            <apex:outputPanel styleClass="custPopup" layout="block" rendered="{!displayGroupPopUp}">
                    You are about to publish <b>"{!surveyToPublishName}"</b>
                     IMPORTANT: Make sure you have all of your questions finalized.<br/>
                     Once the survey is published and you begin collection responses to<br/>
                     a survey, you will not be able to go back and edit it.
                     <br/>
                     <hr/>
                     <br/>

                <apex:outputPanel id="WithoutGroupsPanel" rendered="{!NOT(surveyHasGroups)}">
                    <apex:outputText >You haven't assign your survey to a contact group yet.Please select below</apex:outputText>
                    <br/>
                    <br/>
                    <input type="checkbox" id="SelectAllGroups" class="SelectAllGroups" checked="true" /> <b>All</b><br />
                    <apex:dataTable value="{!completeGroupsList}" var="item" styleClass="popupList">
                        <apex:column title="Name">
                            <input type="checkbox" id="{!item.Id}" class="checkContactGroup" />
                        </apex:column>
                        <apex:column title="Select">
                            <apex:outputText value="{!item.Name}"></apex:outputText>
                        </apex:column>
                   </apex:dataTable>
                </apex:outputPanel>
                <apex:outputPanel id="WithAssignedGroupsPanel" rendered="{!surveyHasGroups}">
                    <apex:outputText >Your survey will be published to the following Groups</apex:outputText>
                    <br />
                    <br />
                    <apex:dataTable value="{!contactGroupsOfSurvey}" var="item" styleClass="popupList">
                        <apex:column title="contactGroup">
                            <apex:outputText value="{!item.ContactGroup__r.Name}"></apex:outputText>
                       </apex:column>
                    </apex:dataTable><br/>
                    <apex:outputText >If you want to change group assigment,please click cancel and go to the distribution page</apex:outputText>
                </apex:outputPanel>
                <br />
                <input class="btn" type="button" value="Publish" onclick="sendSelectedContactGroupsAndPublish()"/>
                <apex:commandButton value="Cancel" onclick="blockPage()" oncomplete="unblockPage();" action="{!closeGroupPopup}" rerender="confirmationPopUp"/>
            </apex:outputPanel>
        </apex:outputPanel>
    </apex:form>
    <apex:form >

        <label for="statusFilter">Filter </label>
        <apex:selectList id="statusFilter" styleClass="statusFilter" value="{!filter}" multiselect="false" size="1">
            <apex:selectOptions value="{!statusList}"/>
        </apex:selectList>
        <apex:actionFunction reRender="table,otpNav2" name="doFilterStatus" action="{!doFilterStatus}" oncomplete="unblockPage();">
            <apex:param id="filter" name="filter" assignTo="{!filter}" value="" />
        </apex:actionFunction>

        <apex:outputPanel layout="block" styleClass="bNext" id="otpNav2">
            <div class="withFilter">
                <div class="next">
                    <span>
                        <apex:variable var="from" value="{!IF(resultSize==0,0,(pageNumber-1) * pageSize + 1)}"/>
                        <apex:variable var="to" value="{!MIN(resultSize,pageNumber * pageSize)}"/>
                        <apex:outputText value="{0,number,0}"><apex:param value="{!from}"/></apex:outputText>-
                        <apex:outputText value="{0,number,0}"><apex:param value="{!to}"/></apex:outputText>&nbsp;of&nbsp;
                        <apex:outputText value="{0,number,0}"><apex:param value="{!resultSize}"/></apex:outputText>
                    </span>
                    <apex:commandLink action="{!Previous}" title="Previous Page" value="<Previous Page" rendered="{!hasPrevious}"/>
                    <apex:outputPanel styleClass="greyedLink" style="color:grey" rendered="{!NOT(hasPrevious)}">&lt;Previous Page</apex:outputPanel>
                    <apex:outputText value=" | "/>
                    <apex:outputPanel styleClass="greyedLink" style="color:grey" rendered="{!NOT(hasNext)}">Next Page&gt;</apex:outputPanel>
                    <apex:commandLink title="Next Page" value="Next Page>" rendered="{!hasNext}" action="{!Next}"/>&nbsp;
                </div>
            </div>
        </apex:outputPanel>
    </apex:form>

    <apex:form prependId="false">
    <apex:pageBlock id="surveys" title="Surveys">
        <apex:pageBlockButtons id="buttons" location="top">
            <apex:commandButton action="{!newSurvey}" id="new" value="New"/>
        </apex:pageBlockButtons>

        <apex:outputPanel id="errorMessages">
                    <apex:outputText styleClass="errorMessage" value="{!error}"></apex:outputText>
        </apex:outputPanel>
        <apex:pageBlockSection rendered="{!surveyList.size > 0}">

        </apex:pageBlockSection>

            <apex:pageBlocktable id="table" value="{!surveyList}" var="item">
                <apex:column title="Status"  styleClass="{!item.Id} {!IF(item.isPPI__c, 'isPPI', '')}" >
                    <apex:facet name="header">
                        <apex:commandLink value="{!$ObjectType.Survey__c.Fields.Status__c.Label}" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="Status__c"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                     <apex:outputText value="{!item.Status__c}" />
                </apex:column>
                <apex:column title="Name">
                    <apex:facet name="header">
                        <apex:commandLink value="{!$ObjectType.Survey__c.Fields.Name.Label}" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="Survey__c.Name"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                    <span id="name-{!item.Id}" class="survey-name">{!item.Name}</span><br/>
                    <span id="alias-{!item.Id}" class="survey-alias">{!item.Alias__c}</span>
                </apex:column>
                <apex:column title="Creator" >
                    <apex:facet name="header">
                        <apex:commandLink value="Created By" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="Owner.Name"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                    <apex:outputText >
                            {!item.Owner.Name}
                     </apex:outputText>
                    </apex:column>
                <apex:column title="Created" >
                    <apex:facet name="header">
                        <apex:commandLink value="{!$ObjectType.Survey__c.Fields.CreatedDate.Label}" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="Survey__c.CreatedDate"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                    <apex:outputText value="{0,date,medium}">
                        <apex:param value="{!item.CreatedDate}" />
                    </apex:outputText>
                </apex:column>
                <apex:column title="Published">
                    <apex:facet name="header">
                        <apex:commandLink value="{!$ObjectType.Survey__c.Fields.PublishedDate__c.Label}" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="PublishedDate__c"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                    <apex:outputText value="{0,date,medium}">
                        <apex:param value="{!item.PublishedDate__c}" />&nbsp;
                    </apex:outputText>
                </apex:column>
                <apex:column title="Modified" >
                    <apex:facet name="header">
                        <apex:commandLink value="{!$ObjectType.Survey__c.Fields.LastModifiedDate.Label}" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="LastModifiedDate"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                    <apex:outputText value="{0,date,medium}" >
                            <apex:param value="{!item.LastModifiedDate}" />&nbsp;
                     </apex:outputText>
                </apex:column>
                <apex:column title="Response">
                <apex:facet name="header">

                        <apex:commandLink value="{!$ObjectType.Survey__c.Fields.ResponseCount__c.Label}" action="{!doSort}"
                            rerender="table">
                            <apex:param name="columnOrder" value="ResponseCount__c"
                                assignTo="{!columnOrder}" />
                        </apex:commandLink>
                    </apex:facet>
                    <apex:variable var="resultCount" value="{!TEXT(item.ResponseCount__c)}"/>
                    <apex:outputLink styleClass="responses{!item.Id}" value="{!URLFOR($Page.SurveyResult, null, [id=item.Id])}" disabled="{!resultCount == '0'}" > {!resultCount} </apex:outputLink>
                </apex:column>
                <apex:column title="Actions" headerValue="Actions">
                    <apex:outputpanel >
                    <apex:variable var="isPublishable" value="{!item.Status__c == 'Draft' && item.QuestionCount__c > 0}"/>
                    <apex:variable var="isEditable" value="{!item.Status__c == 'Draft' ||item.Status__c == null}"/>
                    <apex:variable var="isReportable" value="{!item.Status__c != null && item.Status__c != 'Draft'}"/>
                    <apex:variable var="isDistributable" value="{!item.Status__c != null && item.Status__c == 'Published'}"/>
                    <apex:variable var="isCloseable" value="{!OR(item.Status__c == 'Published',item.Status__c == 'Distributed')}"/>
                        <apex:outputLink value="/apex/surveySetting?id={!item.id}">
                            <apex:image rendered="{!isEditable}" value="{!URLFOR($Resource.IconPackage, '/icons/pencil24.png')}" title="Edit" alt="Edit"/>
                        </apex:outputLink>
                        <apex:image rendered="{!isEditable == false}" value="{!URLFOR($Resource.IconPackage, '/icons/pencil24_gray.png')}" title="Edit" alt="Edit"/>

                        <apex:commandLink action="{!showGroupPopup}" rerender="confirmationPopUp" onclick="blockPage()" oncomplete="unblockPage()">
                            <apex:image rendered="{!isPublishable}" value="{!URLFOR($Resource.IconPackage, 'icons/publish-24.png')}"  title="Publish" alt="Publish"/>
                            <apex:param value="{!item.id}" name="surveyToPublish" assignTo="{!surveyToPublish}"/>
                            <apex:param value="{!item.Name}" name="surveyToPublishName" assignTo="{!surveyToPublishName}"/>
                        </apex:commandLink>
                        <apex:image rendered="{!NOT(isPublishable)}" value="{!URLFOR($Resource.IconPackage, '/icons/publish-24-gray.png')}" title="Publish" alt="Publish"/>

                        <apex:outputLink value="/apex/surveygroupAssignment?id={!item.id}">
                            <apex:image rendered="{!isDistributable}" value="{!URLFOR($Resource.IconPackage, '/icons/groups24.png')}"  title="Distribute" alt="Distribute"/>
                        </apex:outputLink>
                        <apex:image rendered="{!NOT(isDistributable)}" value="{!URLFOR($Resource.IconPackage, '/icons/groups24_gray.png')}" title="Distribute" alt="Distribute"/>

                        <apex:image style="cursor:pointer;" onClick="closeSurvey('{!item.id}')" rendered="{!isCloseable}"  value="{!URLFOR($Resource.IconPackage, '/actions/dialog-cancel-5.png')}" title="Close" alt="Close" />
                        <apex:image rendered="{!NOT(isCloseable)}" value="{!URLFOR($Resource.IconPackage, '/actions/dialog-cancel-5-gray.png')}" title="Close" alt="Close" />

                        &nbsp;
                        <span id="{!item.id}" >
                        <select id="moreactions{!item.id}" class="moreactions" onchange="execMoreAction('{!item.id}','{!$Component.moreOptions}')"/>
                        </span>
                    </apex:outputpanel>
                </apex:column>
            </apex:pageBlocktable>

            <script type="text/javascript">loadMoreActions()</script>
            <apex:actionFunction reRender="table, otpNav2, errorMessage" name="doMoreActionController" action="{!doMoreAction}" oncomplete="unblockPage()">
                <apex:param id="doAction" name="doAction" assignTo="{!doAction}" value="" />
                <apex:param id="surveyIdAction" name="surveyIdAction" assignTo="{!surveyIdAction}" value="" />
                <apex:param id="cloneAllAssignments" name="cloneAllAssignments" assignTo="{!cloneAllAssignments}" value="" />

            </apex:actionFunction>
            <apex:actionFunction name="doPublish" action="{!doPublish}" rerender="table,otpNav2,confirmationPopUp" oncomplete="unblockPage()">
            <apex:param name="contactGroupsIdsToPublish" id="contactGroupsIdsToPublish" assignTo="{!contactGroupsIdsToPublish}" value=""/>
        </apex:actionFunction>

    </apex:pageBlock>
    </apex:form>

</apex:page>
